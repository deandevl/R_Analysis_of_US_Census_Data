---
title: "Notes on 'Analyzing US Census Data'"
author: "Rick Dean"
format: 
  html:
    minimal: true
    toc: true
    toc-depth: 4
    toc-location: "right"
    number-sections: true
    number-offset: 1
    self-contained: true
    smooth-scroll: true
    code-block-bg: "#f1f3f5"
    code-block-border-left: "#31BAE9"
    cap-location: "top"
    mainfont: Verdana
    page-layout: "full"
    max-width: "1000px"
    fig-width: 8
    fig-height: 8
    fig-asp: 0.8
    fig-align: "center"
    theme: journal
    css: ../style.css
    editor: visual
    link-external-newwindow: true
    callout-appearance: simple
    callout-icon: false
    callout-border-left: "#22CC00"
    abstract-title: "Abstract"
    abstract: "The following are notes and R script based on Chapter 3 of the book [Analyzing US Census Data: Methods, Maps, and Models in R](https://walker-data.com/census-r/index.html) by Kyle Walker with its presentation of examples and exercises. The R packages [RcensusPkgPkg](https://github.com/deandevl/RcensusPkgPkg) and [data.table](https://cran.r-project.org/web/packages/data.table/index.html) are used in accessing and manipulating the data respectively.  The tables are created by using R package [DT](https://rstudio.github.io/DT/#)."
---

::: {.callout-tip collapse="true"}
## Usage notes

-   To compile report inside RStudio:
    -   open file `Wrangling_Census_Data.qmd`
    -   press \`Render\` from a recent version of RStudio
:::

# Wrangling Census data with tidyverse(RcensusPkg) tools

::: task
Load the required R packages.
:::

```{r loadPackages, message=FALSE, warning=FALSE}
library(RcensusPkg, quietly = T)
library(usmap, quietly = T)
library(data.table, quietly = T)
library(DT, quietly = T)
library(magrittr, quietly = T)
```

## The tidyverse

## Exploring Census data with tidyverse(and RcensusPkg) tools

From the `RcensusPkg::` package we will be utilizing the following functions to obtain the Census Bureau data:

-   `RcensusPkg::get_vintage_data()` Get Census Bureau data for a specific data set, variables, and region in the form of a data frame.

-   `RcensusPkg::get_variables()` Get the variable IDs of Census Bureau and their descriptive parameters

-   `RcensusPkg::get_multiple_vintage_data()` Get Census Bureau data for a specific data set, variables, and region in the form of a data frame for multiple vintages.

These functions return a `data.table` data frame.

The data wrangling such as sorting, filtering, reshaping, renaming, variable selection will be accomplished using the many capabilities of the `data.table::` package.

::: task
Set up the census key in order to access the Census Bureau's api and define our table options.
:::

```{r}
census_key <- Sys.getenv("CENSUS_KEY")
options(DT.options = list(dom = 't'))
```

### Sorting and filtering

::: task
Request the median age from 2016-2020 5-year ACS Survey for all counties in the United States.
:::

1\. Call `RcensusPkg::get_vintage_data()`:
    Some simple data wrangling includes --
   -  Order the rows by columns "state" and "county"
   -  Set columns "estimate" and "moe" as numeric

```{r}
county_med_age_dt <- RcensusPkg::get_vintage_data(
  dataset = "acs/acs5",
  vintage = 2020,
  vars = list(estimate = "B01002_001E", moe = "B01002_001M"),
  region = "county"
) %>%
  .[order(state, county)] %>%
  .[, `:=` (estimate = as.numeric(estimate), moe = as.numeric(moe))]
```

2\. Show the table:

```{r}
DT::datatable(
  county_med_age_dt[1:8], 
  colnames = c('ID' = 1),
  caption = 'Median Age in US Counties from 2016-2020 5-year ACS Survey ("acs/acs5")'
)
```

::: task
Find the youngest to oldest counties in the US.
:::

1\.  Order the "estimate" column of `county_med_age_dt` via ascending direction (the default):

 ```{r}
 county_med_age_young_to_old_dt <- county_med_age_dt[order(estimate)]
 ```
2\. Show the table:

```{r}
DT::datatable(
  county_med_age_young_to_old_dt[1:8], 
  colnames = c('ID' = 1),
  caption = 'Young-to-Old Median Age in US Counties from 2016-2020 5-year ACS Survey ("acs/acs5")'
)
```

::: task
Find the oldest to youngest counties in the US.
:::

1\. Order the "estimate" column of `county_med_age_dt` via descending direction:
```{r}
county_med_age_old_to_young_dt <- county_med_age_dt[order(-estimate)]
```
2\. Show the table:

```{r}
DT::datatable(
  county_med_age_old_to_young_dt[1:8], 
  colnames = c('ID' = 1),
  caption = 'Old-to-Young Median Age in US Counties from 2016-2020 5-year ACS Survey ("acs/acs5")'
)
```

::: task
Filter the counties in the US with a median age \>= 50 and order by the `state` column.
:::

1\.  Use a simple logical expression to filter the data frame `county_med_age_dt`:

```{r}
county_med_age_gte_50_dt <- county_med_age_dt[estimate >= 50] %>% # filter rows with "estimate" >= 50
  .[order(state)] # order the "state" column
```

2\.  Show the table:

```{r}
DT::datatable(
  county_med_age_gte_50_dt[1:8], 
  colnames = c('ID' = 1),
  caption = 'Median Age in US Counties >= 50 from 2016-2020 5-year ACS Survey ("acs/acs5")'
)
```

::: task
Separate the "NAME" column into columns of state and county names.
:::

1\.  Use `data.table::tstrsplit()` to split the "NAME" column and then remove the "NAME" column:

```{r}
county_med_age_dt[, c("county","state") := tstrsplit(NAME,",")] %>%
  .[, NAME := NULL]
```

2\.  Show the table:

```{r}
DT::datatable(
  county_med_age_dt[1:8], 
  colnames = c('ID' = 1),
  caption = 'Median Age in US Counties from 2016-2020 5-year ACS Survey ("acs/acs5")'
)
```

### Using summary variables and calculating new columns

::: task
Compare the populations of different races in each county in the state of Arizona by normalizing a set of variables.
:::

1\.  Get the total population by race in each county:

Some simple data wrangling includes --

-   Set columns "estimate" and "moe" as numeric
-   If "moe" has a value of -555555555 set it `NA`
-   Redefine the values of the "variable" column using data.table's `fcase()` function
-   Order by the "NAME" column

```{r}
az_fips <- usmap::fips("AZ")  # Get the fips number for Arizona

ar_pop_race_dt <- RcensusPkg::get_vintage_data(
  dataset = "acs/acs5",
  vintage = 2020,
  vars =  list(
    estimate = c("B03002_003E", "B03002_004E", "B03002_005E", "B03002_006E", "B03002_007E", "B03002_012E"),
    moe = c("B03002_003M", "B03002_004M", "B03002_005M", "B03002_006M", "B03002_007M", "B03002_012M")
  ),
  region = "county:*",
  regionin = paste0("state:", az_fips)
) %>%
  .[, `:=` (estimate = as.numeric(estimate), moe = as.numeric(moe))] %>%
  .[, moe := ifelse(moe == -555555555,NA,moe)] %>%
  .[, variable := fcase(
                    variable == "B03002_003","White",
                    variable == "B03002_004","Black",
                    variable == "B03002_005","Native",
                    variable == "B03002_006","Asian",
                    variable == "B03002_007","HIPI",
                    variable == "B03002_012","Hispanic")] %>%
  .[order(NAME)]
```

2\.  Get the total population by county:

Some simple data wrangling includes --

-   Set column "summary_est" to numeric
-   Select columns "NAME" and "summary_est"
-   Order rows by "NAME" column

```{r}
ar_pop_county_dt <- RcensusPkg::get_vintage_data(
  dataset = "acs/acs5",
  vintage = 2020,
  vars = list(
    summary_est = "B03002_001E",
    summary_moe = "B03002_001M"
  ),
  region = "county:*",
  regionin = paste0("state:", az_fips)
) %>%
  .[, summary_est := as.numeric(summary_est)] %>%
  .[, .(NAME, summary_est)] %>%
  .[order(NAME)]
```

3\.  Inner join the two dataframes `ar_pop_race_dt` and `ar_pop_county_dt`. Select columns "NAME", "variable", "estimate", "summary_est" columns:

```{r}
# Set the common keys for both dataframes as "NAME"
data.table::setkey(ar_pop_race_dt, NAME)
data.table::setkey(ar_pop_county_dt, NAME)

# Perform the join
ar_pop_dt <- ar_pop_county_dt[ar_pop_race_dt] %>%
  .[, .(NAME, variable, estimate, summary_est)] # select "NAME", "variable","estimate", "summary_est" columns
```

4\.  Create a new column holding the normalized county population values:

```{r}
ar_pop_dt[, percent := format(round(100 * (estimate / summary_est), 4))]
```

5\.  Show the table:

```{r}
DT::datatable(
  ar_pop_dt[1:8], 
  colnames = c('ID' = 1),
  caption = 'Percent of Races in Arizona Counties from 2016-2020 5-year ACS Survey ("acs/acs5")'
)
```

## Group-wise Census data analysis

### Making group-wise comparisons

::: task
Group `ar_pop_dt` by the "NAME" column (county) and select the largest race percentage from each sub-group.
:::

1\.  Define the grouping for `ar_pop_dt` and filter the "percent" column as the maximum race/ethnic percent for each sub-group:

```{r}
ar_pop_grouped_county_dt <- ar_pop_dt[, .SD[percent == max(percent)], by = NAME]
```

::: callout-tip
## What does the ".SD" mean?

The ".SD" stands for **S**ubset of **D**ata. It by itself is a data.table that holds the data for the current sub-group defined using `by`.
:::

2\.  Show the table:

```{r}
DT::datatable(
  ar_pop_grouped_county_dt, 
  colnames = c('ID' = 1),
  caption = 'Largest Race Percent in each Arizona County from 2016-2020 5-year ACS Survey ("acs/acs5")'
)
```

::: task
Group `ar_pop_dt` by race from the "variable" column and compute summary statistics for each of the sub-groups.
:::

1\.  Define the grouping on racial and ethnic designations (the "variable" column of `ar_pop_dt)` and show the median percentage for each group ordered from highest to lowest:

```{r}
ar_pop_grouped_race_dt <- ar_pop_dt[, .(median_pct = stats::median(percent)), by = variable] %>% # compute the median percent for each group
  .[order(-median_pct)] # order "median_pct" column descending
```

2\.  Show the table:

```{r}
DT::datatable(
  ar_pop_grouped_race_dt, 
  colnames = c('ID' = 1),
  caption = 'Median Race Percent for Counties in Arizona from 2016-2020 5-year ACS Survey ("acs/acs5")'
)
```

### Tabulating new groups

::: task
Re-combine the bands of household income to broader bands for Minnesota counties from the 2012-2016 "acs/acs5" dataset.
:::

1\.  Get the houshold income by county in Minnesota:

Some simple data wrangling includes --

-   Set columns "estimate" and "moe" to numeric
-   Select columns "NAME", "variable", "estimate
-   Order rows by columns "NAME" and "variable"

```{r}
mn_fips <- usmap::fips("MN")
mn_hh_income_dt <- RcensusPkg::get_vintage_data(
  dataset = "acs/acs5",
  vintage = 2016,
  group = "B19001",
  region = "county:*",
  regionin = paste0("state:", mn_fips)
) %>%
  .[, `:=` (estimate = as.numeric(estimate), moe = as.numeric(moe))] %>%
  .[, .(NAME, variable, estimate)] %>%
  .[order(NAME, variable)]
```

2\.  Show the table:

```{r}
DT::datatable(
  mn_hh_income_dt, 
  colnames = c('ID' = 1),
  caption = 'Household Income in Minnesota Counties from 2012-2016 5-year ACS Survey ("acs/acs5")'
)
```

::: task
Consolidate the 16 bands of income ("B19001_2" to "B19001_017") into 3 bands.
:::

1\.  Use data.table's `fcase()` function. Disregard the "B19001_001" which is the total number of households for each county.

```{r}
mm_hh_income_recode_dt <- mn_hh_income_dt %>%
  .[variable != "B19001_001"] %>%
  .[, variable := as.character(variable)] %>%         # "variable" column is factor; change it to character
  .[, incgroup := fcase(                              # re-band "variable" column
    variable < "B19001_008", "below35k",
    variable >= "B19001_008" &  variable < "B19001_013", "bw35kand75k",
    variable >= "B19001_013", "above75k")] %>%
  .[order(NAME)]           
```

2\.  Show the table:

```{r}
DT::datatable(
  mm_hh_income_recode_dt, 
  colnames = c('ID' = 1),
  caption = 'Recoded Household Income in Minnesota Counties from 2012-2016 5-year ACS Survey ("acs/acs5")'
)
```

::: task
Group `mm_hh_income_recode_dt` by "NAME" and "incgroup" and compute the sum of "estimate" for each sub-group.
:::

1\.  Use `data.table`'s `by` directive and order by "NAME" and "incgroup":

```{r}
mm_hh_income_recode_grouped_dt <- mm_hh_income_recode_dt[, .(estimate = sum(estimate)), by = c("NAME", "incgroup")] %>%
.[order(NAME, incgroup)]
```

2\.  Show the table:

```{r}
DT::datatable(
  mm_hh_income_recode_grouped_dt, 
  colnames = c('ID' = 1),
  caption = 'Recoded Household Income Totals in Minnesota Counties from 2012-2016 5-year ACS Survey ("acs/acs5")'
)
```

## Comparing ACS estimates over time

### Time-series analysis: some cautions

Looking at geography changes over time.

::: task
Look at age data (group = "B01001") on Oglala Lakota County, South Dakota.
:::

1\.  Call `RcensusPkg::get_vintage_data()`:

```{r}
sd_oglala_fips <- usmap::fips(state = "SD", county = "Oglala Lakota")
oglala_lakota_age_2020_dt <- RcensusPkg::get_vintage_data(
  dataset = "acs/acs5",
  vintage = 2020,
  group = "B01001",
  region = paste0("county:", substr(sd_oglala_fips,3,5)),
  regionin = paste0("state:", substr(sd_oglala_fips,1,2))
) %>%
  .[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %>%
  .[, moe := ifelse(moe == -555555555, NA, moe)]
```

2\.  Show the table:

```{r}
DT::datatable(
  oglala_lakota_age_2020_dt, 
  colnames = c('ID' = 1),
  caption = 'Age Related Data for Oglala Lakota County, South Dakota from 2016-2020 5-year ACS Survey ("acs/acs5")'
)
```

::: callout-tip
## Changes in age numbers over time

To look at how the age numbers have changed, we could compare the above table with the data from a previous survey such as the 2006-2010 ACS 5-year survey. But a request for the data would result in an error because Oglala Lakota County had a different name in 2010 (i.e. "Shannon County" which has a fips code of "46113").
:::

::: task
Get the 2010 age data for the South Dakota county named "Shannon County".
:::

1\.  Call `RcensusPkg::get_vintage_data()` using the "46113" fips code):

```{r}
sd_oglala_2010_fips <- "46113"
oglala_lakota_age_2010_dt <- RcensusPkg::get_vintage_data(
  dataset = "acs/acs5",
  vintage = 2010,
  group = "B01001",
  region = paste0("county:", substr(sd_oglala_2010_fips,3,5)),
  regionin = paste0("state:", substr(sd_oglala_2010_fips,1,2))
) %>%
  .[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %>%
  .[, moe := ifelse(moe == -555555555, NA, moe)]
```

2\.  Show the table:

```{r}
DT::datatable(
  oglala_lakota_age_2010_dt, 
  colnames = c('ID' = 1),
  caption = 'Age Related Data for Oglala Lakota County, South Dakota from 2006-2010 5-year ACS Survey ("acs/acs5")'
)
```

::: callout-tip
## Changes in variable IDs over time

In addition to changes in geographic identifiers, variable IDs can change over time as well.
:::

::: task
Demonstrate ID changes by comparing variable ID "DP02_0068" from the "acs/acs1/profile" dataset for the years 2018 and 2019.
:::

1\.  Use `RcensusPkg::get_variables()` with its arguments for multiple vintages and a string filter for variable IDs:

```{r}
DP02_0068_dt <- RcensusPkg::get_variables(
  dataset = "acs/acs1/profile",
  vintage = 2018:2019,
  brief = TRUE,
  filter_str = "DP02_0068"
)
```

2\.  Show the table:

```{r}
DT::datatable(
  DP02_0068_dt, 
  colnames = c('ID' = 1),
  caption = 'Variable ID DP02_0068 Across Multiple Vintages acs/acs1/profile 2018 2019'
)
```

::: callout-tip
## Change in ID definition

We see from the table that the variable ID "DP02_0068" has completely changed in its definition from vintage 2018 to vintage 2019.
:::

### Preparing time-series ACS estimates

We are interested in the "B15002" group of variables in a time series from 2010 to 2019 in the 1-year ACS data set ("acs/acs1"). The "B15002" group of variables contains information split by levels of college higher education and sex. The geography is all counties in the state of Colorado.

::: callout-tip
It is recommended that we check the availability of the "B15002" variable for these years using `RcensusPkg::get_variables()`. This can be a time consuming request to the Census Bureau so we have commented out the code for this article.
:::

Call `RcensusPkg::get_variables()` with variable IDs containing the string "B15002" for multiple years in the "acs/acs1" survey data set:

```{r}
# B15002_dt <- RcensusPkg::get_variables(
#   dataset = "acs/acs1",
#   vintage = c(2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019),
#   brief = TRUE,
#   filter_str = "B15002"
# )
```

::: callout-tip
## "B15002" is available

The above request will return without error so we can assume that the "B15002" is available. We do not need the entire table of "B15002" variables. Instead, we are interested in only a subset of variables.
:::

::: task
Define the vectors containing the variable IDs of interest (i.e. estimates "E" and margin of error "M").
:::

```{r}
college_var_names <- c(
  "B15002_015",
  "B15002_016",
  "B15002_017",
  "B15002_018",
  "B15002_032",
  "B15002_033",
  "B15002_034",
  "B15002_035"
)

college_vars_E <- NULL
college_vars_M <- NULL

for(i in seq_along(college_var_names)){
  college_vars_E <- c(college_vars_E, paste0(college_var_names[[i]],"E"))
  college_vars_M <- c(college_vars_M, paste0(college_var_names[[i]],"M"))
}
```

::: task
Get the multi-year/multi-B15002 variable data for the state of Colorado.
:::

1\.  Call `RcensusPkg::get_multiple_vintage_data()` with multiple years and variables:

```{r}
co_fips <- usmap::fips("CO")

college_by_year_dt <- RcensusPkg::get_multi_vintage_data(
  dataset = "acs/acs1",
  vintage_v = 2010:2019,
  vars = list(
    estimate = college_vars_E,
    moe = college_vars_M
  ),
  region = "county:*",
  regionin = paste0("state:", co_fips)) %>%
  .[, .(GEO_ID, NAME, variable, estimate, moe, vintage)] %>%
  .[, `:=` (estimate = as.numeric(estimate), moe = as.numeric(moe))] %>%
  .[order(NAME, variable, vintage)] # Order by "NAME", "variable", "vintage"
```

2\.  Show the table:

```{r}
DT::datatable(
  college_by_year_dt[1:15], 
  colnames = c('ID' = 1),
  caption = 'Educational Attainment by Sex for Colorado Counties from acs/acs1 2010 - 2019'
)
```

::: callout-tip
## Totals of educational attainment by sex, counties, years

We have the estimated totals across 4 levels of educational attainment, 2 levels of sex, 12 counties, and 10 years.
:::

::: task
Group `college_by_year_dt` by county("NAME") and year("vintage") and sum the "estimate" values to get the county totals of higher education regardless of higher education levels or sex levels.
:::

1\. Use `data.table` to perform the grouping and `sum()`:
```{r}
college_totals_dt <- college_by_year_dt[, .(estimate = sum(estimate)), by = c("NAME", "vintage")] 
```

2\. Show the table:

```{r}
DT::datatable(
  college_totals_dt[1:12], 
  colnames = c('ID' = 1),
  caption = 'Yearly Total Educational Attainment for Colorado Counties from acs/acs1 2010 - 2019'
)
```

::: task
Find the total population of each Colorado county.
:::

We will use variable ID "B15002_001E" which is "Estimated Total Colorado county populations" for each of the 10 years 2010 - 2019 from the ACS 1-year Survey data set.

1\.  Get the county total populations across the 10 years:

Some simple data wrangling includes --

-   Select columns "NAME", "summary_est", "summary_moe", "vintage"
-   Convert columns "summary_est", "summary_moe" to numeric
-   Order the data frame rows by "NAME" and "vintage"

```{r}
population_totals_dt <- RcensusPkg::get_multi_vintage_data(
  dataset = "acs/acs1",
  vintage_v = 2010:2019,
  vars = list(summary_est = "B15002_001E", summary_moe = "B15002_001M"),
  region = "county:*",
  regionin = paste0("state:", co_fips)
) %>%
  .[, .(NAME, summary_est, summary_moe, vintage)] %>%
  .[, `:=` (summary_est = as.numeric(summary_est), summary_moe = as.numeric(summary_moe))] %>%
  .[order(NAME, vintage)]
```

2\.  Show the table:

```{r}
DT::datatable(
  population_totals_dt[1:15], 
  colnames = c('ID' = 1),
  caption = 'Total County Populations in Colorado from acs/acs1 2010 - 2019'
)
```

::: callout-tip
## Join county population totals with higher education totals

From `population_totals_dt` we have yearly county total populations in Colorado. From `college_totals_dt` we have the county total of higher education in Colorado. Both are by year from 2010 to 2019. We can join these two data frames and compute additional statistics.
:::

1\.  Inner join `population_totals_dt` with `college_totals_dt`:

```{r}
# set join keys
data.table::setkeyv(college_totals_dt, c("NAME", "vintage"))
data.table::setkeyv(population_totals_dt, c("NAME", "vintage"))

# join the dataframes
college_pop_totals_dt <- college_totals_dt[population_totals_dt]
```

2\.  Show the table:

```{r}
DT::datatable(
  college_pop_totals_dt[1:12], 
  colnames = c('ID' = 1),
  caption = 'County College Attainment and Population Across Colorado Counties from acs/acs1 2010 - 2019'
)
```

::: task
Add a percentage column to `college_pop_totals_dt` by dividing the county college total column("estimate") by county total population column("summary_est")
:::

1\.  Add column "percentage" to `college_pop_totals_dt`:

```{r}
college_pop_totals_dt <- college_pop_totals_dt[, percentage := format(round(100 * estimate/summary_est))] %>%   # compute the percentage
  .[, .(NAME, vintage, percentage)]                                     # Select columns of interest
```

2\.  Reshape `college_pop_totals_dt` to the wide form with "vintage" across the columns:

```{r}
college_percentages_dt <- data.table::dcast(college_pop_totals_dt, NAME ~ vintage, value.var = "percentage")
```

3\.  Show the table:

```{r}
DT::datatable(
  college_percentages_dt[1:12], 
  colnames = c('ID' = 1),
  caption = 'Percentage of Higher Education Across Colorado Counties from acs/acs1 2010 - 2019'
)
```

::: callout-tip
## Conclusion

This concludes the notes on Chapter 3 "Wrangling Census Data".
:::
